generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  gamesAsWhite  Game[]    @relation(name: "user_games_white")
  gamesAsBlack  Game[]    @relation(name: "user_games_black")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id            String  @id @default(cuid())
  whitePlayerId String?
  whitePlayer   User?   @relation(fields: [whitePlayerId], references: [id], name: "user_games_white")

  blackPlayerId String?
  blackPlayer   User?   @relation(fields: [blackPlayerId], references: [id], name: "user_games_black")

  result     String?
  resultType String?

  baseTime  Int?
  increment Int?

  moves     Json
  moveCount Int

  lastPositionSnapshot String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
